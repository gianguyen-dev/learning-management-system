Index: src/main/java/com/group1/MockProject/service/implementation/CourseServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group1.MockProject.service.implementation;\r\n\r\nimport com.group1.MockProject.dto.request.CourseRequest;\r\nimport com.group1.MockProject.dto.response.CategoryDTO;\r\nimport com.group1.MockProject.dto.response.CourseDTO;\r\nimport com.group1.MockProject.entity.Category;\r\nimport com.group1.MockProject.entity.Course;\r\nimport com.group1.MockProject.entity.Instructor;\r\nimport com.group1.MockProject.exception.UnauthorizedException;\r\nimport com.group1.MockProject.repository.CategoryRepository;\r\nimport com.group1.MockProject.repository.CourseRepository;\r\nimport com.group1.MockProject.repository.InstructorRepository;\r\nimport com.group1.MockProject.service.CourseService;\r\nimport com.group1.MockProject.utils.JwtUtil;\r\nimport org.modelmapper.ModelMapper;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\npublic class CourseServiceImpl implements CourseService {\r\n\r\n\r\n    private ModelMapper modelMapper;\r\n\r\n\r\n    private CourseRepository courseRepository;\r\n\r\n    private CategoryRepository categoryRepository;\r\n\r\n    private InstructorRepository instructorRepository;\r\n    @Autowired\r\n    public CourseServiceImpl(CourseRepository courseRepository,\r\n                             CategoryRepository categoryRepository,\r\n                             InstructorRepository instructorRepository,\r\n                             ModelMapper modelMapper) {\r\n        this.courseRepository = courseRepository;\r\n        this.categoryRepository = categoryRepository;\r\n        this.instructorRepository = instructorRepository;\r\n        this.modelMapper = modelMapper;\r\n    }\r\n\r\n    private Course mapToEntity(CourseDTO courseDTO) {\r\n        return modelMapper.map(courseDTO, Course.class);\r\n    }\r\n\r\n    private CourseDTO mapToDTO(Course course) {\r\n        return modelMapper.map(course, CourseDTO.class);\r\n    }\r\n\r\n    private CategoryDTO maptoDTO(Category category) {\r\n        return modelMapper.map(category, CategoryDTO.class);\r\n    }\r\n\r\n    @Override\r\n    public List<CourseDTO> getAllCourses() {\r\n        // Get all course\r\n        List<Course> courses = courseRepository.findAll();\r\n\r\n        // Get all category\r\n        List<Category> categories = categoryRepository.findAll();\r\n        // Map category entity to dto\r\n        List<CategoryDTO> categoryDTOList = categories.stream().map(category -> maptoDTO(category)).collect(Collectors.toList());\r\n        // Map course entity to dto\r\n        List<CourseDTO> response = courses.stream().map(course -> mapToDTO(course)).collect(Collectors.toList());\r\n        return response;\r\n    }\r\n    @Override\r\n    public CourseDTO createCourse(CourseRequest courseRequest, String token) {\r\n\r\n        int instructorId = JwtUtil.extractUserIdFromToken(token);\r\n        // Convert the CreateCourseRequest to a Course entity\r\n        Course course = new Course();\r\n        course.setTitle(courseRequest.getTitle());\r\n        course.setDescription(courseRequest.getDescription());\r\n        course.setPrice(courseRequest.getPrice());\r\n\r\n        // Fetch Category and Instructor from DB based on the provided IDs (if needed)\r\n        // Assuming that the CreateCourseRequest contains categoryId and instructorId\r\n        Category category = categoryRepository.findById(courseRequest.getCategoryId())\r\n                .orElseThrow(() -> new RuntimeException(\"Category not found\"));\r\n        // Fetch Instructor from DB using instructorId\r\n        Instructor instructor = instructorRepository.findById(instructorId)\r\n                .orElseThrow(() -> new RuntimeException(\"Instructor with ID \"\r\n                        + courseRequest.getInstructorId() + \" not found\"));\r\n\r\n        // Set Category and Instructor\r\n        course.setCategory(category);\r\n        course.setInstructor(instructor);\r\n\r\n        // Save the course entity in the database\r\n        course = courseRepository.save(course);\r\n\r\n        return modelMapper.map(course, CourseDTO.class);\r\n    }\r\n\r\n    @Override\r\n    public CourseDTO updateCourse(int courseId, CourseRequest courseRequest, String token) {\r\n        // Find the existing course by ID\r\n        Course course = courseRepository.findById(courseId)\r\n                .orElseThrow(() -> new UnauthorizedException(\"Course not found\"));\r\n        int instructorId = JwtUtil.extractUserIdFromToken(token);\r\n\r\n        // Kiểm tra quyền sở hữu\r\n        if (course.getInstructor().getId() != instructorId) {\r\n            throw new RuntimeException(\"You do not have permission to update this course\");\r\n        }\r\n\r\n        // Update course fields with the values from the request\r\n        course.setTitle(courseRequest.getTitle());\r\n        course.setDescription(courseRequest.getDescription());\r\n        course.setPrice(courseRequest.getPrice());\r\n\r\n        // Fetch and update Category and Instructor if IDs are provided in the request\r\n        Category category = categoryRepository.findById(courseRequest.getCategoryId())\r\n                .orElseThrow(() -> new RuntimeException(\"Category not found\"));\r\n        course.setCategory(category);\r\n\r\n        Instructor instructor = instructorRepository.findById(instructorId)\r\n                .orElseThrow(() -> new RuntimeException(\"Instructor not found\"));\r\n        course.setInstructor(instructor);\r\n\r\n\r\n        // Save the updated course\r\n        course = courseRepository.save(course);\r\n\r\n        // Return the updated CourseDTO\r\n        return modelMapper.map(course, CourseDTO.class);\r\n    }\r\n\r\n    @Override\r\n    public void deleteCourse(int courseId, String token) {\r\n\r\n        int instructorId = JwtUtil.extractUserIdFromToken(token);\r\n\r\n        Course course = courseRepository.findById(courseId)\r\n                .orElseThrow(() -> new UnauthorizedException(\"Course not found\"));\r\n\r\n        // Kiểm tra quyền sở hữu\r\n        if (course.getInstructor().getId() != instructorId) {\r\n            throw new RuntimeException(\"You do not have permission to delete this course\");\r\n        }\r\n\r\n        if (!course.getEnrollment().isEmpty()) {\r\n            throw new RuntimeException(\"Can not delete course when student was enrolled\");\r\n        }\r\n\r\n\r\n\r\n        courseRepository.delete(course);\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public List<CourseDTO> getAllCourses(String token) {\r\n        // Lấy instructorId từ token\r\n        int instructorId = JwtUtil.extractUserIdFromToken(token);\r\n\r\n        // Tìm danh sách các khóa học mà instructorId này sở hữu\r\n        List<Course> courses = courseRepository.findByInstructorId(instructorId);\r\n\r\n        // Chuyển danh sách Course thành danh sách CourseDTO\r\n        return courses.stream()\r\n                .map(course -> modelMapper.map(course, CourseDTO.class))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n//    @Override\r\n//    public List<CourseDTO> getAllCourses() {\r\n//        // Get all course\r\n//        List<Course> courses = courseRepository.findAll();\r\n//\r\n//        // Get all category\r\n//        List<Category> categories = categoryRepository.findAll();\r\n//        // Map category entity to dto\r\n//        List<CategoryDTO> categoryDTOList = categories.stream().map(category -> maptoDTO(category)).collect(Collectors.toList());\r\n//        // Map course entity to dto\r\n//        List<CourseDTO> response = courses.stream().map(course -> mapToDTO(course)).collect(Collectors.toList());\r\n//        return response;\r\n//    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/group1/MockProject/service/implementation/CourseServiceImpl.java b/src/main/java/com/group1/MockProject/service/implementation/CourseServiceImpl.java
--- a/src/main/java/com/group1/MockProject/service/implementation/CourseServiceImpl.java	(revision 06c0fe7954332183c84b7205613aa193123aec6c)
+++ b/src/main/java/com/group1/MockProject/service/implementation/CourseServiceImpl.java	(date 1734424263384)
@@ -71,6 +71,7 @@
     public CourseDTO createCourse(CourseRequest courseRequest, String token) {
 
         int instructorId = JwtUtil.extractUserIdFromToken(token);
+//        System.out.println("ID: " + :instructorId);
         // Convert the CreateCourseRequest to a Course entity
         Course course = new Course();
         course.setTitle(courseRequest.getTitle());
@@ -104,9 +105,9 @@
         int instructorId = JwtUtil.extractUserIdFromToken(token);
 
         // Kiểm tra quyền sở hữu
-        if (course.getInstructor().getId() != instructorId) {
-            throw new RuntimeException("You do not have permission to update this course");
-        }
+//        if (course.getInstructor().getId() != instructorId) {
+//            throw new RuntimeException("You do not have permission to update this course");
+//        }
 
         // Update course fields with the values from the request
         course.setTitle(courseRequest.getTitle());
@@ -139,9 +140,9 @@
                 .orElseThrow(() -> new UnauthorizedException("Course not found"));
 
         // Kiểm tra quyền sở hữu
-        if (course.getInstructor().getId() != instructorId) {
-            throw new RuntimeException("You do not have permission to delete this course");
-        }
+//        if (course.getInstructor().getId() != instructorId) {
+//            throw new RuntimeException("You do not have permission to delete this course");
+//        }
 
         if (!course.getEnrollment().isEmpty()) {
             throw new RuntimeException("Can not delete course when student was enrolled");
Index: src/main/java/com/group1/MockProject/config/SecurityConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group1.MockProject.config;\r\n\r\nimport com.group1.MockProject.security.JwtAuthenticationEntryPoint;\r\nimport com.group1.MockProject.security.JwtAuthenticationFilter;\r\n\r\nimport com.group1.MockProject.security.JwtAuthenticationEntryPoint;\r\nimport com.group1.MockProject.security.JwtAuthenticationFilter;\r\nimport com.group1.MockProject.security.JwtAuthenticationEntryPoint;\r\nimport com.group1.MockProject.security.JwtAuthenticationFilter;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\n\r\n@Configuration\r\n@EnableMethodSecurity\r\n@EnableWebSecurity\r\npublic class SecurityConfiguration {\r\n\r\n    private JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;\r\n\r\n    private JwtAuthenticationFilter jwtAuthenticationFilter;\r\n\r\n\r\n    public SecurityConfiguration(\r\n            JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint,\r\n            JwtAuthenticationFilter jwtAuthenticationFilter) {\r\n        this.jwtAuthenticationEntryPoint = jwtAuthenticationEntryPoint;\r\n        this.jwtAuthenticationFilter = jwtAuthenticationFilter;\r\n    }\r\n\r\n    private final String[] WHITE_LIST = {\r\n            \"/api/v1/test/**\",\r\n            \"/api/v1/auth/**\",\r\n            \"/api/v1/auth/sign-in/instructor\",\r\n            \"/api/v1/courses/create\",\r\n            \"/api/v1/courses/**\",\r\n            \"/login/oauth2/**\",\r\n            \"/oauth2/**\",\r\n            \"/api/v1/student/**\"\r\n\r\n    };\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http.csrf(AbstractHttpConfigurer::disable)  // Tắt CSRF nếu làm việc với API\r\n                .authorizeHttpRequests(auth ->\r\n                        auth\r\n                                .requestMatchers(\"/api/v1/admin\").hasRole(\"ADMIN\")\r\n                            .requestMatchers(WHITE_LIST).permitAll()  // Đảm bảo các URL này được phép truy cập mà không cần xác thực\r\n                            .anyRequest().authenticated()  // Các request khác yêu cầu phải đăng nhập\r\n                )\r\n                .exceptionHandling(exception -> exception.authenticationEntryPoint(jwtAuthenticationEntryPoint))\r\n                .oauth2Login(oauth2 -> oauth2\r\n                        .defaultSuccessUrl(\"/api/v1/auth/oauth2/success\", true)\r\n                        .authorizationEndpoint(endpoint -> endpoint\r\n                                .baseUri(\"/api/v1/auth/oauth2/authorize\")) // Authorization endpoint\r\n                        .redirectionEndpoint(endpoint -> endpoint\r\n                                .baseUri(\"/login/oauth2/code/google\")) // Ensure callback matches Google redirect\r\n                )\r\n                .sessionManagement(session -> session\r\n                        .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED) // Session will not be created automatically\r\n                ); // Tắt Basic Authentication nếu không cần thiết\r\n\r\n        http.addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);\r\n        return http.build();\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/group1/MockProject/config/SecurityConfiguration.java b/src/main/java/com/group1/MockProject/config/SecurityConfiguration.java
--- a/src/main/java/com/group1/MockProject/config/SecurityConfiguration.java	(revision 06c0fe7954332183c84b7205613aa193123aec6c)
+++ b/src/main/java/com/group1/MockProject/config/SecurityConfiguration.java	(date 1734591119166)
@@ -10,6 +10,7 @@
 import lombok.RequiredArgsConstructor;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.http.HttpMethod;
 import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
@@ -43,7 +44,8 @@
             "/api/v1/courses/**",
             "/login/oauth2/**",
             "/oauth2/**",
-            "/api/v1/student/**"
+            "/api/v1/student/**",
+            "/api/v1/profile"
 
     };
 
@@ -53,6 +55,7 @@
                 .authorizeHttpRequests(auth ->
                         auth
                                 .requestMatchers("/api/v1/admin").hasRole("ADMIN")
+                                .requestMatchers(HttpMethod.GET,"/api/v1/**").permitAll()
                             .requestMatchers(WHITE_LIST).permitAll()  // Đảm bảo các URL này được phép truy cập mà không cần xác thực
                             .anyRequest().authenticated()  // Các request khác yêu cầu phải đăng nhập
                 )
Index: src/main/java/com/group1/MockProject/service/implementation/AuthServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group1.MockProject.service.implementation;\r\n\r\nimport com.group1.MockProject.dto.ApiResponseDto;\r\nimport com.group1.MockProject.dto.request.ForgotPasswordRequest;\r\nimport com.group1.MockProject.dto.request.ResetPasswordRequest;\r\nimport com.group1.MockProject.dto.request.SignInRequest;\r\nimport com.group1.MockProject.dto.request.SignUpRequest;\r\nimport com.group1.MockProject.dto.request.SignUpRequestForInstructor;\r\nimport com.group1.MockProject.dto.response.*;\r\nimport com.group1.MockProject.entity.*;\r\nimport com.group1.MockProject.repository.InstructorRepository;\r\nimport com.group1.MockProject.repository.StudentRepository;\r\nimport com.group1.MockProject.repository.UserRepository;\r\nimport com.group1.MockProject.service.AuthService;\r\nimport com.group1.MockProject.service.ConfirmTokenService;\r\nimport com.group1.MockProject.service.EmailService;\r\nimport com.group1.MockProject.utils.JwtUtil;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.Optional;\r\nimport org.springframework.dao.DataIntegrityViolationException;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.authentication.BadCredentialsException;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\n@Service\r\npublic class AuthServiceImpl implements AuthService {\r\n\r\n  private UserRepository userRepository;\r\n\r\n  private StudentRepository studentRepository;\r\n\r\n  private final InstructorRepository instructorRepository;\r\n\r\n  private PasswordEncoder passwordEncoder;\r\n\r\n  private ConfirmTokenService confirmTokenService;\r\n\r\n  private EmailService emailService;\r\n\r\n  public AuthServiceImpl(\r\n      UserRepository userRepository,\r\n      StudentRepository studentRepository,\r\n      InstructorRepository instructorRepository,\r\n      PasswordEncoder passwordEncoder,\r\n      ConfirmTokenService confirmTokenService,\r\n      EmailService emailService) {\r\n    this.userRepository = userRepository;\r\n    this.instructorRepository = instructorRepository;\r\n    this.passwordEncoder = passwordEncoder;\r\n    this.studentRepository = studentRepository;\r\n    this.confirmTokenService = confirmTokenService;\r\n    this.emailService = emailService;\r\n  }\r\n\r\n  public SignInResponse authenticate(SignInRequest request) {\r\n\r\n    User user =\r\n        userRepository\r\n            .findByEmail(request.getEmail())\r\n            .orElseThrow(() -> new BadCredentialsException(\"Sai email hoặc mật khẩu\"));\r\n\r\n    if (!passwordEncoder.matches(request.getPassword(), user.getPassword())) {\r\n      throw new BadCredentialsException(\"Sai email hoặc mật khẩu\");\r\n    }\r\n\r\n    // Giả sử bạn sử dụng JWT để tạo token\r\n    String token = JwtUtil.generateToken(user); // Hàm này cần được triển khai riêng\r\n\r\n    System.out.println(\"USER: \" + JwtUtil.extractEmail(token));\r\n\r\n    return new SignInResponse(token, \"Bearer\", \"Đăng nhập thành công\");\r\n  }\r\n\r\n  public SignUpResponse signUp(SignUpRequest request) {\r\n\r\n    Optional<User> existedUser = userRepository.findByEmail(request.getEmail());\r\n    if (existedUser.isPresent()) {\r\n      throw new DataIntegrityViolationException(\"Người dùng đã tồn tại trong hệ thống\");\r\n    }\r\n\r\n    if (!request.getPassword().equals(request.getConfirmPassword())) {\r\n      throw new IllegalArgumentException(\"Mật khẩu không trùng khớp\");\r\n    }\r\n\r\n    User user = new User();\r\n    user.setEmail(request.getEmail());\r\n    user.setPassword(passwordEncoder.encode(request.getPassword()));\r\n    user.setFullName(request.getFullName());\r\n    user.setPhone(request.getPhone());\r\n    user.setAddress(request.getAddress());\r\n    user.setStatus(0);\r\n    user.setRole(UserRole.STUDENT);\r\n\r\n    User newUser = userRepository.save(user);\r\n\r\n    // Create New student\r\n    Student student = new Student();\r\n    student.setStudentCode(\"STD\" + LocalDateTime.now().getYear() + \"\" + newUser.getId());\r\n    student.setUser(newUser);\r\n    studentRepository.save(student);\r\n\r\n    String token = JwtUtil.generateToken(newUser);\r\n\r\n    // confirm trong vong 24h theo SRS\r\n    ConfirmToken confirmToken =\r\n        new ConfirmToken(token, LocalDateTime.now(), LocalDateTime.now().plusHours(24), newUser);\r\n\r\n    confirmTokenService.saveConfirmToken(confirmToken);\r\n\r\n    String link = \"http://localhost:8080/api/v1/auth/sign-up/confirm?token=\" + token;\r\n    String title = \"Xác nhận địa chỉ email của bạn\";\r\n    String content =\r\n        \"Để xác thực địa chỉ email đã đăng ký vui lòng nhấn <blockquote style=\\\"Margin: 0 0 20px 0;border-left:10px solid #b1b4b6;padding:15px 0 0.1px 15px;font-size:19px;line-height:25px\\\"><a href=\\\"\"\r\n            + link\r\n            + \"\\\">vào đây.</a></blockquote>\\n <p>Cảm ơn bạn đã đăng ký tài khoản. Hẹn gặp lại bạn! \\nAdmin Group 1</p>\";\r\n\r\n    emailService.send(\r\n        request.getEmail(), emailService.buildEmail(title, request.getEmail(), content));\r\n\r\n    return new SignUpResponse(\r\n        token,\r\n        \"Đăng ký thành công. Vui lòng kiểm tra email để hoàn thành xác nhận tài khoản.\"\r\n            + \"Nếu bạn không nhận được email. Ấn vào đây.\");\r\n  }\r\n\r\n  public SignUpResponse signUpForInstructor(SignUpRequestForInstructor requestForInstructor) {\r\n\r\n    Optional<User> existedUser = userRepository.findByEmail(requestForInstructor.getEmail());\r\n    if (existedUser.isPresent()) {\r\n      throw new RuntimeException(\"Người dùng đã tồn tại trong hệ thống\");\r\n    }\r\n\r\n    if (!requestForInstructor.getPassword().equals(requestForInstructor.getConfirmPassword())) {\r\n      throw new RuntimeException(\"Mật khẩu không trùng khớp\");\r\n    }\r\n\r\n    User user = new User();\r\n    user.setEmail(requestForInstructor.getEmail());\r\n    user.setPassword(passwordEncoder.encode(requestForInstructor.getPassword()));\r\n    user.setFullName(requestForInstructor.getFullName());\r\n    user.setPhone(requestForInstructor.getPhone());\r\n    user.setAddress(requestForInstructor.getAddress());\r\n    user.setStatus(0);\r\n    user.setRole(UserRole.INSTRUCTOR);\r\n\r\n    User newUser = userRepository.save(user);\r\n\r\n    // Create New instructor\r\n    Instructor instructor = new Instructor();\r\n    instructor.setExpertise(requestForInstructor.getExpertise());\r\n    instructor.setName(requestForInstructor.getFullName());\r\n    instructor.setUser(newUser);\r\n    instructorRepository.save(instructor);\r\n\r\n    String token = JwtUtil.generateToken(newUser);\r\n\r\n    // confirm trong vong 24h theo SRS\r\n    ConfirmToken confirmToken =\r\n        new ConfirmToken(token, LocalDateTime.now(), LocalDateTime.now().plusHours(24), newUser);\r\n\r\n    confirmTokenService.saveConfirmToken(confirmToken);\r\n\r\n        String link = \"http://localhost:8080/api/v1/auth/sign-up/confirm?token=\" + token;\r\n        String title = \"Kích hoạt tài khoản Instructor\";\r\n        String content =\r\n                \"Để xác thực địa chỉ email đã đăng ký vui lòng nhấn <blockquote style=\\\"Margin: 0 0 20px 0;border-left:10px solid #b1b4b6;padding:15px 0 0.1px 15px;font-size:19px;line-height:25px\\\"><a href=\\\"\"\r\n                        + link\r\n                        + \"\\\">vào đây.</a></blockquote>\\n <p>Cảm ơn bạn đã đăng ký tài khoản. Hẹn gặp lại bạn! \\nAdmin Group 1</p>\";\r\n\r\n    emailService.send(\r\n        requestForInstructor.getEmail(),\r\n        emailService.buildEmail(title, requestForInstructor.getEmail(), content));\r\n\r\n    return new SignUpResponse(\r\n        token,\r\n        \"Đăng ký thành công. Vui lòng kiểm tra email để hoàn thành xác nhận tài khoản.\"\r\n            + \"Nếu bạn không nhận được email. Ấn vào đây.\");\r\n  }\r\n\r\n  @Transactional\r\n  public ConfirmTokenResponse confirmToken(String token) {\r\n    ConfirmToken confirmationToken =\r\n        confirmTokenService\r\n            .getToken(token)\r\n            .orElseThrow(() -> new IllegalStateException(\"Token không hợp lệ\"));\r\n\r\n    if (confirmationToken.getConfirmedAt() != null) {\r\n      throw new IllegalStateException(\"Email đã được xác nhận\");\r\n    }\r\n\r\n    LocalDateTime expiredAt = confirmationToken.getExpiresAt();\r\n\r\n    if (expiredAt.isBefore(LocalDateTime.now())) {\r\n      throw new IllegalStateException(\"Token đã hết hạn\");\r\n    }\r\n\r\n    confirmTokenService.setConfirmedAt(token);\r\n    confirmationToken.getUser().setVerificationCode(token);\r\n    confirmationToken.getUser().setStatus(1);\r\n\r\n    return new ConfirmTokenResponse(\"Xác thực thành công, tài khoản hoạt động.\");\r\n  }\r\n\r\n  public void changePassword(String email, String oldPassword, String newPassword) {\r\n    // Lấy thông tin người dùng\r\n    User user =\r\n        userRepository\r\n            .findByEmail(email)\r\n            .orElseThrow(\r\n                () -> new IllegalArgumentException(\"Người dùng không tồn tại trong hệ thống\"));\r\n\r\n    // Kiểm tra mật khẩu cũ\r\n    if (!passwordEncoder.matches(oldPassword, user.getPassword())) {\r\n      throw new BadCredentialsException(\"Mật khẩu cũ không đúng\");\r\n    }\r\n\r\n    // Cập nhật mật khẩu mới\r\n    user.setPassword(passwordEncoder.encode(newPassword));\r\n    userRepository.save(user);\r\n  }\r\n\r\n\r\n  @Override\r\n  public SignInResponse signUpOAuth2(\r\n      String email, String fullName, String provider, boolean status) {\r\n\r\n    Optional<User> existedUser = userRepository.findByEmailAndProvider(email, provider);\r\n    // IF USER NOT EXISTS\r\n    User user = new User();\r\n    if (existedUser.isPresent()) {\r\n      user = existedUser.get();\r\n      if (user.getPassword() != null) {\r\n        String token = JwtUtil.generateToken(user);\r\n        return new SignInResponse(token, \"Bearer\", \"Đăng nhập với Google thành công\");\r\n      }\r\n\r\n    } else {\r\n      user.setEmail(email);\r\n    }\r\n    user.setFullName(fullName);\r\n    user.setRole(UserRole.STUDENT);\r\n    user.setProvider(provider);\r\n    user.setStatus(1);\r\n\r\n    if (user.getPassword() == null) {\r\n      int randomPass = 100000 + (int) (Math.random() * ((999999 - 100000) + 1));\r\n      user.setPassword(passwordEncoder.encode(\"\" + randomPass));\r\n\r\n      String resetToken = JwtUtil.generateToken(user);\r\n\r\n      // Send the token to the user (e.g., via email)\r\n      // You can implement an EmailService to handle email sending\r\n      String link = \"http://localhost:8080/api/v1/auth/forgot-password/change?token=\" + resetToken;\r\n      String title = \"Đặt lại mật khẩu\";\r\n      String content =\r\n          \"Mật khẩu được tạo từ hệ thống \"\r\n              + randomPass\r\n              + \".Vui lòng nhấn <blockquote style=\\\"Margin: 0 0 20px 0;border-left:10px solid #b1b4b6;padding:15px 0 0.1px 15px;font-size:19px;line-height:25px\\\"><a href=\\\"\"\r\n              + link\r\n              + \"\\\">vào đây.</a> để có thể đặt lại mật khẩu của bạn.</blockquote>\";\r\n\r\n      emailService.sendDetail(\r\n          user.getEmail(),\r\n          emailService.buildEmail(title, user.getEmail(), content),\r\n          \"Đặt lại mật khẩu\");\r\n    }\r\n    userRepository.save(user);\r\n    String token = JwtUtil.generateToken(user);\r\n    return new SignInResponse(token, \"Bearer\", \"Đăng nhập với Google thành công\");\r\n  }\r\n\r\n  /** Forgot password */\r\n  public ResponseEntity<ApiResponseDto<ForgotPasswordResponse>> forgotPassword(\r\n      ForgotPasswordRequest request) {\r\n    // Find the user by email\r\n    Optional<User> user = userRepository.findByEmail(request.getEmail());\r\n    if (!user.isPresent()) {\r\n      throw new IllegalArgumentException(\"Người dùng không tồn tại trong hệ thống\");\r\n    }\r\n    // Generate a password reset token using JwtUtil\r\n    String resetToken = JwtUtil.generateToken(user.get());\r\n\r\n    // Send the token to the user (e.g., via email)\r\n    // You can implement an EmailService to handle email sending\r\n    String emailMessage = \"Đã gửi email đổi mật khẩu\";\r\n    String link = \"http://localhost:8080/api/v1/auth/forgot-password/change?token=\" + resetToken;\r\n    String title = \"Khôi phục mật khẩu\";\r\n\r\n    emailService.sendDetail(\r\n        user.get().getEmail(), buildForgotPasswordEmail(user.get().getEmail(), link), title);\r\n\r\n    return ResponseEntity.status(HttpStatus.ACCEPTED)\r\n        .body(\r\n            ApiResponseDto.<ForgotPasswordResponse>builder()\r\n                .status(202)\r\n                .message(HttpStatus.ACCEPTED.getReasonPhrase())\r\n                .response(new ForgotPasswordResponse(resetToken, emailMessage))\r\n                .build());\r\n  }\r\n\r\n  public ResponseEntity<ApiResponseDto<ResetPasswordResponse>> resetPassword(\r\n      ResetPasswordRequest request) {\r\n    if (!JwtUtil.validateToken(request.getToken())) {\r\n      throw new BadCredentialsException(\"Mã tái thiết lập không hợp lệ hoặc đã hết hạn\");\r\n    }\r\n\r\n    String email = JwtUtil.extractEmail(request.getToken());\r\n    Optional<User> user = userRepository.findByEmail(email);\r\n    if (!user.isPresent()) {\r\n      throw new IllegalArgumentException(\"Người dùng không tồn tại trong hệ thống\");\r\n    }\r\n    if (!request.getNewPassword().equals(request.getConfirmPassword())) {\r\n      throw new IllegalArgumentException(\"Mật khẩu không trùng khớp\");\r\n    }\r\n    user.get().setPassword(passwordEncoder.encode(request.getNewPassword()));\r\n    userRepository.save(user.get());\r\n\r\n    return ResponseEntity.ok()\r\n        .body(\r\n            ApiResponseDto.<ResetPasswordResponse>builder()\r\n                .status(200)\r\n                .message(HttpStatus.OK.getReasonPhrase())\r\n                .response(new ResetPasswordResponse(\"Đổi mật khẩu thành công\"))\r\n                .build());\r\n  }\r\n\r\n  private String buildForgotPasswordEmail(String name, String link) {\r\n    return \"<div style=\\\"font-family:Helvetica,Arial,sans-serif;font-size:16px;margin:0;color:#0b0c0c\\\">\\n\"\r\n        + \"\\n\"\r\n        + \"<span style=\\\"display:none;font-size:1px;color:#fff;max-height:0\\\"></span>\\n\"\r\n        + \"\\n\"\r\n        + \"  <table role=\\\"presentation\\\" width=\\\"100%\\\" style=\\\"border-collapse:collapse;min-width:100%;width:100%!important\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" border=\\\"0\\\">\\n\"\r\n        + \"    <tbody><tr>\\n\"\r\n        + \"      <td width=\\\"100%\\\" height=\\\"53\\\" bgcolor=\\\"#0b0c0c\\\">\\n\"\r\n        + \"        \\n\"\r\n        + \"        <table role=\\\"presentation\\\" width=\\\"100%\\\" style=\\\"border-collapse:collapse;max-width:580px\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" border=\\\"0\\\" align=\\\"center\\\">\\n\"\r\n        + \"          <tbody><tr>\\n\"\r\n        + \"            <td width=\\\"70\\\" bgcolor=\\\"#0b0c0c\\\" valign=\\\"middle\\\">\\n\"\r\n        + \"                <table role=\\\"presentation\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" border=\\\"0\\\" style=\\\"border-collapse:collapse\\\">\\n\"\r\n        + \"                  <tbody><tr>\\n\"\r\n        + \"                    <td style=\\\"padding-left:10px\\\">\\n\"\r\n        + \"                  \\n\"\r\n        + \"                    </td>\\n\"\r\n        + \"                    <td style=\\\"font-size:28px;line-height:1.315789474;Margin-top:4px;padding-left:10px\\\">\\n\"\r\n        + \"                      <span style=\\\"font-family:Helvetica,Arial,sans-serif;font-weight:700;color:#ffffff;text-decoration:none;vertical-align:top;display:inline-block\\\">Khôi phục mật khẩu</span>\\n\"\r\n        + \"                    </td>\\n\"\r\n        + \"                  </tr>\\n\"\r\n        + \"                </tbody></table>\\n\"\r\n        + \"              </a>\\n\"\r\n        + \"            </td>\\n\"\r\n        + \"          </tr>\\n\"\r\n        + \"        </tbody></table>\\n\"\r\n        + \"        \\n\"\r\n        + \"      </td>\\n\"\r\n        + \"    </tr>\\n\"\r\n        + \"  </tbody></table>\\n\"\r\n        + \"  <table role=\\\"presentation\\\" class=\\\"m_-6186904992287805515content\\\" align=\\\"center\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" border=\\\"0\\\" style=\\\"border-collapse:collapse;max-width:580px;width:100%!important\\\" width=\\\"100%\\\">\\n\"\r\n        + \"    <tbody><tr>\\n\"\r\n        + \"      <td width=\\\"10\\\" height=\\\"10\\\" valign=\\\"middle\\\"></td>\\n\"\r\n        + \"      <td>\\n\"\r\n        + \"        \\n\"\r\n        + \"                <table role=\\\"presentation\\\" width=\\\"100%\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" border=\\\"0\\\" style=\\\"border-collapse:collapse\\\">\\n\"\r\n        + \"                  <tbody><tr>\\n\"\r\n        + \"                    <td bgcolor=\\\"#1D70B8\\\" width=\\\"100%\\\" height=\\\"10\\\"></td>\\n\"\r\n        + \"                  </tr>\\n\"\r\n        + \"                </tbody></table>\\n\"\r\n        + \"        \\n\"\r\n        + \"      </td>\\n\"\r\n        + \"      <td width=\\\"10\\\" valign=\\\"middle\\\" height=\\\"10\\\"></td>\\n\"\r\n        + \"    </tr>\\n\"\r\n        + \"  </tbody></table>\\n\"\r\n        + \"\\n\"\r\n        + \"\\n\"\r\n        + \"\\n\"\r\n        + \"  <table role=\\\"presentation\\\" class=\\\"m_-6186904992287805515content\\\" align=\\\"center\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" border=\\\"0\\\" style=\\\"border-collapse:collapse;max-width:580px;width:100%!important\\\" width=\\\"100%\\\">\\n\"\r\n        + \"    <tbody><tr>\\n\"\r\n        + \"      <td height=\\\"30\\\"><br></td>\\n\"\r\n        + \"    </tr>\\n\"\r\n        + \"    <tr>\\n\"\r\n        + \"      <td width=\\\"10\\\" valign=\\\"middle\\\"><br></td>\\n\"\r\n        + \"      <td style=\\\"font-family:Helvetica,Arial,sans-serif;font-size:19px;line-height:1.315789474;max-width:560px\\\">\\n\"\r\n        + \"        \\n\"\r\n        + \"            <p style=\\\"Margin:0 0 20px 0;font-size:19px;line-height:25px;color:#0b0c0c\\\">Dear \"\r\n        + name\r\n        + \",</p><p style=\\\"Margin:0 0 20px 0;font-size:19px;line-height:25px;color:#0b0c0c\\\"> Vui lòng nhấn  <blockquote style=\\\"Margin: 0 0 20px 0;border-left:10px solid #b1b4b6;padding:15px 0 0.1px 15px;font-size:19px;line-height:25px\\\"><a href=\\\"\"\r\n        + link\r\n        + \"\\\">vào đây</a> để khôi phục tài khoản của bạn.</blockquote>\"\r\n        + \"        \\n\"\r\n        + \"      </td>\\n\"\r\n        + \"      <td width=\\\"10\\\" valign=\\\"middle\\\"><br></td>\\n\"\r\n        + \"    </tr>\\n\"\r\n        + \"    <tr>\\n\"\r\n        + \"      <td height=\\\"30\\\"><br></td>\\n\"\r\n        + \"    </tr>\\n\"\r\n        + \"  </tbody></table><div class=\\\"yj6qo\\\"></div><div class=\\\"adL\\\">\\n\"\r\n        + \"\\n\"\r\n        + \"</div></div>\";\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/group1/MockProject/service/implementation/AuthServiceImpl.java b/src/main/java/com/group1/MockProject/service/implementation/AuthServiceImpl.java
--- a/src/main/java/com/group1/MockProject/service/implementation/AuthServiceImpl.java	(revision 06c0fe7954332183c84b7205613aa193123aec6c)
+++ b/src/main/java/com/group1/MockProject/service/implementation/AuthServiceImpl.java	(date 1734423791883)
@@ -70,7 +70,6 @@
     // Giả sử bạn sử dụng JWT để tạo token
     String token = JwtUtil.generateToken(user); // Hàm này cần được triển khai riêng
 
-    System.out.println("USER: " + JwtUtil.extractEmail(token));
 
     return new SignInResponse(token, "Bearer", "Đăng nhập thành công");
   }
@@ -101,16 +100,18 @@
     Student student = new Student();
     student.setStudentCode("STD" + LocalDateTime.now().getYear() + "" + newUser.getId());
     student.setUser(newUser);
+    user.setStudent(student);
     studentRepository.save(student);
-
+    userRepository.save(user);
     String token = JwtUtil.generateToken(newUser);
 
+    System.out.println("STUDENT: " + student.toString());
     // confirm trong vong 24h theo SRS
     ConfirmToken confirmToken =
         new ConfirmToken(token, LocalDateTime.now(), LocalDateTime.now().plusHours(24), newUser);
 
     confirmTokenService.saveConfirmToken(confirmToken);
-
+    System.out.println("CONFIRM TOKEN: " + confirmToken.toString());
     String link = "http://localhost:8080/api/v1/auth/sign-up/confirm?token=" + token;
     String title = "Xác nhận địa chỉ email của bạn";
     String content =
@@ -154,8 +155,9 @@
     instructor.setExpertise(requestForInstructor.getExpertise());
     instructor.setName(requestForInstructor.getFullName());
     instructor.setUser(newUser);
+    newUser.setInstructor(instructor);
     instructorRepository.save(instructor);
-
+    userRepository.save(newUser);
     String token = JwtUtil.generateToken(newUser);
 
     // confirm trong vong 24h theo SRS
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>3.3.6</version>\r\n\t\t<relativePath/> <!-- lookup parent from repository -->\r\n\t</parent>\r\n\t<groupId>com.example</groupId>\r\n\t<artifactId>MockProject</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<name>MockProject</name>\r\n\t<description>Mock Project</description>\r\n\t<url/>\r\n\t<licenses>\r\n\t\t<license/>\r\n\t</licenses>\r\n\t<developers>\r\n\t\t<developer/>\r\n\t</developers>\r\n\t<scm>\r\n\t\t<connection/>\r\n\t\t<developerConnection/>\r\n\t\t<tag/>\r\n\t\t<url/>\r\n\t</scm>\r\n\t<properties>\r\n\t\t<java.version>21</java.version>\r\n\t</properties>\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.auth0</groupId>\r\n\t\t\t<artifactId>java-jwt</artifactId>\r\n\t\t\t<version>4.4.0</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.modelmapper</groupId>\r\n\t\t\t<artifactId>modelmapper</artifactId>\r\n\t\t\t<version>3.2.1</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.jsonwebtoken</groupId>\r\n\t\t\t<artifactId>jjwt-api</artifactId>\r\n\t\t\t<version>0.11.5</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.jsonwebtoken</groupId>\r\n\t\t\t<artifactId>jjwt-impl</artifactId>\r\n\t\t\t<version>0.11.5</version>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.jsonwebtoken</groupId>\r\n\t\t\t<artifactId>jjwt-jackson</artifactId>\r\n\t\t\t<version>0.11.5</version>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-validation</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-oauth2-client</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-mail</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-validation</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.postgresql</groupId>\r\n\t\t\t<artifactId>postgresql</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t<optional>true</optional>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.modelmapper</groupId>\r\n\t\t\t<artifactId>modelmapper</artifactId>\r\n\t\t\t<version>3.2.1</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.mockito</groupId>\r\n\t\t\t<artifactId>mockito-core</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.junit.jupiter</groupId>\r\n\t\t\t<artifactId>junit-jupiter</artifactId>\r\n\t\t\t<version>5.10.0</version>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.security</groupId>\r\n\t\t\t<artifactId>spring-security-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-security</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.security</groupId>\r\n\t\t\t<artifactId>spring-security-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-security</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\r\n\t\t</dependency>\r\n\t\t<!-- https://mvnrepository.com/artifact/org.modelmapper/modelmapper -->\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.modelmapper</groupId>\r\n\t\t\t<artifactId>modelmapper</artifactId>\r\n\t\t\t<version>3.2.1</version>\r\n\t\t</dependency>\r\n\r\n\t</dependencies>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t\t<configuration>\r\n\t\t\t\t\t<excludes>\r\n\t\t\t\t\t\t<exclude>\r\n\t\t\t\t\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t\t\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t\t\t\t</exclude>\r\n\t\t\t\t\t</excludes>\r\n\t\t\t\t</configuration>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 06c0fe7954332183c84b7205613aa193123aec6c)
+++ b/pom.xml	(date 1734424950646)
@@ -35,11 +35,6 @@
 			<artifactId>java-jwt</artifactId>
 			<version>4.4.0</version>
 		</dependency>
-		<dependency>
-			<groupId>org.modelmapper</groupId>
-			<artifactId>modelmapper</artifactId>
-			<version>3.2.1</version>
-		</dependency>
 
 		<dependency>
 			<groupId>io.jsonwebtoken</groupId>
