Index: src/main/java/com/group1/MockProject/controller/AdminController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group1.MockProject.controller;\r\n\r\nimport com.group1.MockProject.dto.ApiResponseDto;\r\nimport com.group1.MockProject.dto.request.CategoryRequest;\r\nimport com.group1.MockProject.dto.response.AdminDashboardResponse;\r\nimport com.group1.MockProject.dto.response.CategoryDTO;\r\nimport com.group1.MockProject.dto.response.CourseDTO;\r\nimport com.group1.MockProject.dto.response.CourseListResponse;\r\nimport com.group1.MockProject.entity.CourseStatus;\r\nimport com.group1.MockProject.entity.User;\r\nimport com.group1.MockProject.repository.UserRepository;\r\nimport com.group1.MockProject.service.AdminService;\r\nimport com.group1.MockProject.service.CategoryService;\r\nimport com.group1.MockProject.service.CourseService;\r\nimport com.group1.MockProject.utils.JwtUtil;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.validation.Valid;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.dao.EmptyResultDataAccessException;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.access.AccessDeniedException;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.security.authentication.BadCredentialsException;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\n@AllArgsConstructor\r\n@RestController\r\n@RequestMapping(\"/api/v1/admin\")\r\npublic class AdminController {\r\n\r\n  private final CourseService courseService;\r\n  private final JwtUtil jwtUtil;\r\n  private final UserRepository userRepository;\r\n  private final AdminService adminService;\r\n  private final CategoryService categoryService;\r\n\r\n\r\n  // API chỉ dành cho Admin\r\n  @PreAuthorize(\"hasRole('ADMIN')\")\r\n  @GetMapping(\"/data\")\r\n  public ResponseEntity<String> getAdminData(@RequestHeader(\"Authorization\") String token) {\r\n    return ResponseEntity.ok(\"Admin Data\");\r\n  }\r\n\r\n  @PreAuthorize(\"hasRole('ADMIN')\")\r\n  @PutMapping(\"/courses/{courseId}/approve\")\r\n  public ResponseEntity<ApiResponseDto<String>> approveCourse(\r\n      @PathVariable int courseId, @RequestHeader(\"Authorization\") String authorizationHeader) {\r\n    // Xác thực token\r\n    String token = authorizationHeader.replace(\"Bearer \", \"\");\r\n\r\n    if (!jwtUtil.validateToken(token)) {\r\n      throw new BadCredentialsException(\"Token không hợp lệ\");\r\n    }\r\n\r\n    // Kiểm tra quyền admin\r\n    String email = jwtUtil.extractEmail(token);\r\n    User user =\r\n        userRepository\r\n            .findByEmail(email)\r\n            .orElseThrow(() -> new EmptyResultDataAccessException(\"Không tìm thấy người dùng\", 1));\r\n\r\n    courseService.updateCourseStatus(courseId, CourseStatus.APPROVED);\r\n    return ResponseEntity.ok()\r\n        .body(\r\n            ApiResponseDto.<String>builder()\r\n                .status(200)\r\n                .message(HttpStatus.OK.getReasonPhrase())\r\n                .response(\"Khóa học đã được phê duyệt thành công\")\r\n                .build());\r\n  }\r\n\r\n  @PreAuthorize(\"hasRole('ADMIN')\")\r\n  @PutMapping(\"/courses/{courseId}/reject\")\r\n  public ResponseEntity<ApiResponseDto<String>> rejectCourse(\r\n      @PathVariable int courseId,\r\n      @RequestParam(required = false) String reason,\r\n      @RequestHeader(\"Authorization\") String authorizationHeader) {\r\n    // Xác thực token\r\n    String token = authorizationHeader.replace(\"Bearer \", \"\");\r\n    if (!jwtUtil.validateToken(token)) {\r\n      throw new BadCredentialsException(\"Token không hợp lệ\");\r\n    }\r\n\r\n    // Kiểm tra quyền admin\r\n    String email = jwtUtil.extractEmail(token);\r\n    User user =\r\n        userRepository\r\n            .findByEmail(email)\r\n            .orElseThrow(() -> new EmptyResultDataAccessException(\"Không tìm thấy người dùng\", 1));\r\n\r\n    courseService.updateCourseStatus(courseId, CourseStatus.REJECTED, reason);\r\n    return ResponseEntity.ok()\r\n        .body(\r\n            ApiResponseDto.<String>builder()\r\n                .status(200)\r\n                .message(HttpStatus.OK.getReasonPhrase())\r\n                .response(\"Khóa học đã bị từ chối\" + (reason != null ? \". Lý do: \" + reason : \"\"))\r\n                .build());\r\n  }\r\n\r\n  @PreAuthorize(\"hasRole('STUDENT')\")\r\n  @GetMapping(\"/dashboard\")\r\n  public ResponseEntity<ApiResponseDto<AdminDashboardResponse>> getDashboardData(\r\n      @RequestHeader(\"Authorization\") String authorizationHeader) {\r\n    // Xác thực token\r\n    String token = authorizationHeader.replace(\"Bearer \", \"\");\r\n    if (!jwtUtil.validateToken(token)) {\r\n      throw new BadCredentialsException(\"Token không hợp lệ\");\r\n    }\r\n\r\n    // Kiểm tra người dùng\r\n    String email = jwtUtil.extractEmail(token);\r\n    User user =\r\n        userRepository\r\n            .findByEmail(email)\r\n            .orElseThrow(() -> new EmptyResultDataAccessException(\"Không tìm thấy người dùng\", 1));\r\n\r\n    AdminDashboardResponse dashboardData = adminService.getDashboardData();\r\n\r\n    return ResponseEntity.ok()\r\n        .body(\r\n            ApiResponseDto.<AdminDashboardResponse>builder()\r\n                .status(200)\r\n                .message(HttpStatus.OK.getReasonPhrase())\r\n                .response(dashboardData)\r\n                .build());\r\n  }\r\n\r\n  @PostMapping(\"/category/create\")\r\n  public ResponseEntity<?> createCategory(\r\n      @RequestBody CategoryRequest categoryRequest, HttpServletRequest request) {\r\n\r\n    // Lấy token từ header Authorization\r\n    String token = request.getHeader(\"Authorization\");\r\n\r\n    // Kiểm tra xem token có hợp lệ không\r\n    if (token == null || !token.startsWith(\"Bearer \")) {\r\n      throw new BadCredentialsException(\"Token xác thực không tìm thấy hoặc không đúng\");\r\n    }\r\n\r\n    token = token.substring(7); // Loại bỏ \"Bearer \" để lấy chỉ phần token\r\n\r\n    // Tiến hành tạo Category\r\n    CategoryDTO response = categoryService.createCategory(categoryRequest, token);\r\n    return ResponseEntity.status(HttpStatus.CREATED)\r\n        .body(\r\n            ApiResponseDto.<CategoryDTO>builder()\r\n                .status(201)\r\n                .message(HttpStatus.CREATED.getReasonPhrase())\r\n                .response(response)\r\n                .build()); // Trả về CategoryDTO trong body của response\r\n  }\r\n\r\n  @PutMapping(\"/category/{categoryId}\")\r\n  public ResponseEntity<?> updateCategory(\r\n      @PathVariable int categoryId,\r\n      @RequestBody CategoryRequest categoryRequest,\r\n      HttpServletRequest request) {\r\n    // Lấy token từ header Authorization\r\n    String token = request.getHeader(\"Authorization\");\r\n\r\n    // Kiểm tra xem token có hợp lệ không\r\n    if (token == null || !token.startsWith(\"Bearer \")) {\r\n      throw new BadCredentialsException(\"Token xác thực không tìm thấy hoặc không đúng\");\r\n    }\r\n\r\n    token = token.substring(7); // Loại bỏ \"Bearer \" để lấy chỉ phần token\r\n\r\n    // Xác thực token\r\n    if (!JwtUtil.validateToken(token)) {\r\n      throw new BadCredentialsException(\"Token không hợp lệ hoặc đã hết hạn\");\r\n    }\r\n\r\n    String email = JwtUtil.extractEmail(token);\r\n\r\n    User user =\r\n        userRepository\r\n            .findByEmail(email)\r\n            .orElseThrow(() -> new EmptyResultDataAccessException(\"Không tìm thấy nguời dùng\", 1));\r\n\r\n    // Kiểm tra role\r\n    if (user.getRole() == null) {\r\n      throw new BadCredentialsException(\"Không tìm thấy vai trò trong token\");\r\n    }\r\n\r\n    // Kiểm tra instructor\r\n    if (user.getId() == 0) {\r\n      throw new BadCredentialsException(\"Không tìm thấy người hướng dẫn trong token\");\r\n    }\r\n\r\n    if (!user.getRole().toString().equals(\"ADMIN\")) {\r\n      throw new AccessDeniedException(\"Bạn không có quyền để cập nhật phân loại khoá học này\");\r\n    }\r\n\r\n    CategoryDTO response = categoryService.updateCategory(categoryId, categoryRequest, token);\r\n\r\n    return ResponseEntity.status(HttpStatus.OK)\r\n        .body(\r\n            ApiResponseDto.<CategoryDTO>builder()\r\n                .status(200)\r\n                .message(HttpStatus.OK.getReasonPhrase())\r\n                .response(response)\r\n                .build());\r\n  }\r\n\r\n  @DeleteMapping(\"/category/{categoryId}\")\r\n  public ResponseEntity<?> deleteCourse(@PathVariable int categoryId, HttpServletRequest request) {\r\n    // Lấy token từ header Authorization\r\n    String token = request.getHeader(\"Authorization\");\r\n\r\n    // Kiểm tra token\r\n    if (token == null || !token.startsWith(\"Bearer \")) {\r\n      throw new BadCredentialsException(\"Token xác thực không tìm thấy hoặc không đúng\");\r\n    }\r\n\r\n    // Loại bỏ \"Bearer \" để lấy chỉ phần token\r\n    token = token.substring(7);\r\n\r\n    // Xác thực token\r\n    if (!JwtUtil.validateToken(token)) {\r\n      throw new BadCredentialsException(\"Token không hợp lệ hoặc đã hết hạn\");\r\n    }\r\n\r\n    String email = JwtUtil.extractEmail(token);\r\n    User user =\r\n        userRepository\r\n            .findByEmail(email)\r\n            .orElseThrow(() -> new EmptyResultDataAccessException(\"Không tìm thấy người dùng\", 1));\r\n\r\n    // Kiểm tra role\r\n    if (user.getRole() == null) {\r\n      throw new BadCredentialsException(\"Không tìm thấy vai trò trong token\");\r\n    }\r\n\r\n    // Kiểm tra role\r\n    if (user.getId() == 0) {\r\n      throw new BadCredentialsException(\"Không tìm thấy admin trong token\");\r\n    }\r\n\r\n    if (!user.getRole().toString().equals(\"ADMIN\")) {\r\n      throw new AccessDeniedException(\"Bạn không có quyền để xoá phân loại khoá học này\");\r\n    }\r\n\r\n    categoryService.deleteCategory(categoryId, token);\r\n\r\n    // Trả về thông báo xóa thành công\r\n    return ResponseEntity.status(HttpStatus.NO_CONTENT)\r\n        .body(\r\n            ApiResponseDto.<CategoryDTO>builder()\r\n                .status(204)\r\n                .message(HttpStatus.NO_CONTENT.getReasonPhrase())\r\n                .build());\r\n  }\r\n\r\n  @PreAuthorize(\"hasRole('ADMIN')\")\r\n  @GetMapping(\"/courses\")\r\n  public ResponseEntity<ApiResponseDto<CourseListResponse>> getAllCourses() {\r\n    List<CourseDTO> courses = courseService.getAllCourses();\r\n    CourseListResponse response = new CourseListResponse(courses);\r\n\r\n    return ResponseEntity.ok()\r\n        .body(\r\n            ApiResponseDto.<CourseListResponse>builder()\r\n                .status(200)\r\n                .message(HttpStatus.OK.getReasonPhrase())\r\n                .response(response)\r\n                .build());\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/group1/MockProject/controller/AdminController.java b/src/main/java/com/group1/MockProject/controller/AdminController.java
--- a/src/main/java/com/group1/MockProject/controller/AdminController.java	(revision 4ee3392f8edef9d17d134f3997855cea395df3c3)
+++ b/src/main/java/com/group1/MockProject/controller/AdminController.java	(date 1735612587927)
@@ -9,9 +9,8 @@
 import com.group1.MockProject.entity.CourseStatus;
 import com.group1.MockProject.entity.User;
 import com.group1.MockProject.repository.UserRepository;
-import com.group1.MockProject.service.AdminService;
-import com.group1.MockProject.service.CategoryService;
-import com.group1.MockProject.service.CourseService;
+import com.group1.MockProject.service.*;
+import com.group1.MockProject.utils.AppContants;
 import com.group1.MockProject.utils.JwtUtil;
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.validation.Valid;
@@ -35,6 +34,94 @@
   private final UserRepository userRepository;
   private final AdminService adminService;
   private final CategoryService categoryService;
+    private StudentService studentService;
+    private InstructorService instructorService;
+    private UserService userService;
+
+    public AdminController(                        CourseService courseService,
+                           JwtUtil jwtUtil,
+                           UserRepository userRepository,
+                           AdminService adminService,
+                           CategoryService categoryService) {
+        this.studentService = studentService;
+        this.instructorService = instructorService;
+        this.userService = userService;
+        this.courseService = courseService;
+        this.jwtUtil = jwtUtil;
+        this.userRepository = userRepository;
+        this.adminService = adminService;
+        this.categoryService = categoryService;
+    }
+
+
+    // GET /api/v1/admin/user get student and instructor
+    @PreAuthorize(("hasRole('ADMIN')"))
+    @GetMapping("/users/students")
+    public ResponseEntity<?> getAllStudents(@RequestHeader("Authorization") String token,
+                                            @RequestParam(value = "pageNo", defaultValue = AppContants.DEFAULT_PAGE_NUMBER,required = false) int pageNo,
+                                            @RequestParam(value = "pageSize", defaultValue = AppContants.DEFAULT_PAGE_SIZE, required = false) int pageSize,
+                                            @RequestParam(value = "sortBy", defaultValue = AppContants.DEFAULT_SORT_BY, required = false) String sortBy,
+                                            @RequestParam(value = "sortDir", defaultValue = AppContants.DEFAULT_SORT_DIR, required = false) String sortDir) {
+        PageStudentsDTO response = studentService.getAllStudents(pageNo,pageSize,sortBy,sortDir);
+        return ResponseEntity.ok()
+                .body(
+                        ApiResponseDto.<PageStudentsDTO>builder()
+                                .status(HttpStatus.OK.value())
+                                .message(HttpStatus.OK.getReasonPhrase())
+                                .response(response)
+                                .build());
+    }
+
+    @PreAuthorize(("hasRole('ADMIN')"))
+    @GetMapping("/users/instructors")
+    public ResponseEntity<?> getAllInstructors(@RequestHeader("Authorization") String token,
+                                               @RequestParam(value = "pageNo", defaultValue = AppContants.DEFAULT_PAGE_NUMBER,required = false) int pageNo,
+                                               @RequestParam(value = "pageSize", defaultValue = AppContants.DEFAULT_PAGE_SIZE, required = false) int pageSize,
+                                               @RequestParam(value = "sortBy", defaultValue = AppContants.DEFAULT_SORT_BY, required = false) String sortBy,
+                                               @RequestParam(value = "sortDir", defaultValue = AppContants.DEFAULT_SORT_DIR, required = false) String sortDir) {
+        PageInstructorsDTO response = instructorService.getAllInstructors(pageNo,pageSize,sortBy,sortDir);
+        return ResponseEntity.ok()
+                .body(
+                        ApiResponseDto.<PageInstructorsDTO>builder()
+                                .status(HttpStatus.OK.value())
+                                .message(HttpStatus.OK.getReasonPhrase())
+                                .response(response)
+                                .build());
+    }
+
+    // PUT /api/v1/user/block/{userid}
+    @PreAuthorize(("hasRole('ADMIN')"))
+    @PutMapping("/users/block/{id}")
+    public ResponseEntity<?> blockUser(@PathVariable("id") String id) {
+        try {
+            int userId = Integer.parseInt(id);
+
+            userService.blockUserById(userId);
+
+            return ResponseEntity.ok("Người dùng với id " + userId + " đã bị khóa");
+        } catch (NumberFormatException e) {
+
+            return ResponseEntity.badRequest().body("Id người dùng không hợp lệ: " + id);
+        }
+    }
+
+    // PUT /api/v1/user/block/{userid}
+    @PreAuthorize(("hasRole('ADMIN')"))
+    @PutMapping("/users/unblock/{id}")
+    public ResponseEntity<?> unblockUser(@PathVariable("id") String id) {
+        try {
+            int userId = Integer.parseInt(id);
+
+            userService.unblockUserById(userId);
+
+            return ResponseEntity.ok("Người dùng với id " + userId + " đã mở khóa");
+        } catch (NumberFormatException e) {
+
+            return ResponseEntity.badRequest().body("Id người dùng không hợp lệ: " + id);
+        }
+    }
+
+
 
 
   // API chỉ dành cho Admin
@@ -269,4 +356,62 @@
                 .response(response)
                 .build());
   }
+
+  @PostMapping("/sign-in")
+  public ResponseEntity<ApiResponseDto<SignInResponse>> signIn(
+      @Valid @RequestBody SignInRequest signInRequest) {
+    SignInResponse signInResponse = adminService.authenticate(signInRequest);
+    return ResponseEntity.status(HttpStatus.OK)
+        .body(
+            ApiResponseDto.<SignInResponse>builder()
+                .status(200)
+                .message(HttpStatus.OK.getReasonPhrase())
+                .response(signInResponse)
+                .build());
+  }
+
+  @GetMapping("/all-users")
+  public ResponseEntity<ApiResponseDto<List<User>>> getAllUsers(
+      @RequestHeader("Authorization") String token) {
+    List<User> userList = adminService.getAllUsers();
+    return ResponseEntity.status(HttpStatus.OK)
+        .body(
+            ApiResponseDto.<List<User>>builder()
+                .status(200)
+                .message(HttpStatus.OK.getReasonPhrase())
+                .response(userList)
+                .build());
+  }
+
+  @PostMapping("/users/block/{id}")
+  public ResponseEntity<ApiResponseDto<User>> blockInstructor(
+      @RequestHeader("Authorization") String token, @PathVariable("id") int id) {
+    User user = adminService.setBlockUser(id);
+    return ResponseEntity.status(HttpStatus.OK)
+        .body(
+            ApiResponseDto.<User>builder()
+                .status(200)
+                .message(HttpStatus.OK.getReasonPhrase())
+                .response(user)
+                .build());
+  }
+
+  @PostMapping("/users/approved/{id}")
+  public ResponseEntity<ApiResponseDto<User>> approveInstructor(
+      @RequestHeader("Authorization") String token, @PathVariable("id") int id) {
+    User user = adminService.setApprovedUser(id);
+    return ResponseEntity.status(HttpStatus.OK)
+        .body(
+            ApiResponseDto.<User>builder()
+                .status(200)
+                .message(HttpStatus.OK.getReasonPhrase())
+                .response(user)
+                .build());
+  }
+
+  @DeleteMapping("/users/delete/{id}")
+  public void deleteInstructor(
+      @RequestHeader("Authorization") String token, @PathVariable("id") int id) {
+    adminService.deleteUser(id);
+  }
 }
Index: src/main/java/com/group1/MockProject/controller/StudentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group1.MockProject.controller;\r\n\r\nimport com.group1.MockProject.dto.ApiResponseDto;\r\nimport com.group1.MockProject.dto.PaymentDTO;\r\nimport com.group1.MockProject.dto.request.AddPaymentRequest;\r\nimport com.group1.MockProject.dto.request.PaymentRequest;\r\nimport com.group1.MockProject.dto.response.*;\r\nimport com.group1.MockProject.entity.*;\r\nimport com.group1.MockProject.service.PaymentService;\r\nimport com.group1.MockProject.service.SavedCourseService;\r\nimport com.group1.MockProject.dto.ApiResponseDto;\r\nimport com.group1.MockProject.dto.response.InstructorResponse;\r\nimport com.group1.MockProject.service.StudentService;\r\nimport com.group1.MockProject.service.implementation.VNPayServiceImpl;\r\nimport com.group1.MockProject.utils.JwtUtil;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.validation.Valid;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.http.HttpStatus;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/v1/student\")\r\n@RequiredArgsConstructor\r\npublic class StudentController {\r\n  private final StudentService studentService;\r\n  private final SavedCourseService savedCourseService;\r\n  private final PaymentService paymentService;\r\n  private final VNPayServiceImpl VNPayService;\r\n\r\n  private final JwtUtil jwtUtil;\r\n\r\n  @GetMapping(\"/view-list-subscription\")\r\n  public ResponseEntity<List<InstructorResponse>> viewListSubscription(\r\n      @RequestHeader(\"Authorization\") String authorizationHeader) {\r\n    String token = authorizationHeader.replace(\"Bearer \", \"\");\r\n    String email = jwtUtil.extractEmail(token);\r\n    List<InstructorResponse> instructors = studentService.viewListSubscription(email);\r\n    return ResponseEntity.ok(instructors);\r\n  }\r\n\r\n  @GetMapping(\"/add-payment\")\r\n  public ResponseEntity<ApiResponseDto<AddPaymentResponse>> AddPaymentDetail(\r\n      @RequestHeader(\"Authorization\") String authorizationHeader,\r\n      @Valid @RequestBody AddPaymentRequest request) {\r\n    String token = authorizationHeader.replace(\"Bearer \", \"\");\r\n    String email = JwtUtil.decodeToken(token).getSubject();\r\n    AddPaymentResponse response = paymentService.addPaymentDetail(email, request);\r\n    return ResponseEntity.ok()\r\n        .body(\r\n            ApiResponseDto.<AddPaymentResponse>builder()\r\n                .status(200)\r\n                .message(HttpStatus.OK.getReasonPhrase())\r\n                .response(response)\r\n                .build()\r\n        );\r\n  }\r\n    @GetMapping(\"/search-instructor\")\r\n    public ResponseEntity<List<InstructorResponse>> searchInstructor(@RequestParam String name) {\r\n        List<InstructorResponse> instructors = studentService.searchInstructor(name);\r\n        return ResponseEntity.ok(instructors);\r\n    }\r\n\r\n    @PostMapping(\"/subscribe/{instructorId}\")\r\n    public ResponseEntity<ApiResponseDto<String>> subscribeToInstructor(\r\n            @PathVariable Integer instructorId,\r\n            @RequestHeader(\"Authorization\") String authorizationHeader) {\r\n        String token = authorizationHeader.replace(\"Bearer \", \"\");\r\n        String email = jwtUtil.extractEmail(token);\r\n        String response = studentService.subscribeToInstructor(email, instructorId);\r\n\r\n        return ResponseEntity.ok()\r\n                .body(ApiResponseDto.<String>builder()\r\n                        .status(200)\r\n                        .message(HttpStatus.OK.getReasonPhrase())\r\n                        .response(response)\r\n                        .build());\r\n    }\r\n\r\n    @PostMapping(\"/unsubscribe/{instructorId}\")\r\n    public ResponseEntity<ApiResponseDto<String>> unsubscribeFromInstructor(\r\n            @PathVariable Integer instructorId,\r\n            @RequestHeader(\"Authorization\") String authorizationHeader) {\r\n        String token = authorizationHeader.replace(\"Bearer \", \"\");\r\n        String email = jwtUtil.extractEmail(token);\r\n        String response = studentService.unsubscribeFromInstructor(email, instructorId);\r\n\r\n        return ResponseEntity.ok()\r\n                .body(ApiResponseDto.<String>builder()\r\n                        .status(200)\r\n                        .message(HttpStatus.OK.getReasonPhrase())\r\n                        .response(response)\r\n                        .build());\r\n    }\r\n\r\n\r\n  @GetMapping(\"/payment/vn-pay\")\r\n  public ResponseEntity<ApiResponseDto<PaymentDTO.VNPayResponse>> payment(\r\n      @RequestHeader(\"Authorization\") String authorizationHeader,\r\n      @Valid @RequestBody PaymentRequest request, HttpServletRequest httpRequest) {\r\n    String token = authorizationHeader.replace(\"Bearer \", \"\");\r\n    String email = JwtUtil.decodeToken(token).getSubject();\r\n    Payment payment = paymentService.checkPayment(email, request);\r\n    PaymentDTO.VNPayResponse response = VNPayService.createVnPayPayment(payment, httpRequest);\r\n    return ResponseEntity.ok()\r\n        .body(\r\n            ApiResponseDto.<PaymentDTO.VNPayResponse>builder()\r\n                .status(200)\r\n                .message(HttpStatus.OK.getReasonPhrase())\r\n                .response(response)\r\n                .build()\r\n        );\r\n  }\r\n\r\n  @GetMapping(\"/savedCourses\")\r\n  public ResponseEntity<ApiResponseDto<GetSavedCourseResponse>> viewSavedCourse(\r\n      @RequestHeader(\"Authorization\") String authorizationHeader) {\r\n    String token = authorizationHeader.replace(\"Bearer \", \"\");\r\n    String email = JwtUtil.decodeToken(token).getSubject();\r\n    GetSavedCourseResponse response = savedCourseService.getSavedCoursesByEmail(email);\r\n    return ResponseEntity.ok()\r\n        .body(\r\n            ApiResponseDto.<GetSavedCourseResponse>builder()\r\n                .status(200)\r\n                .message(HttpStatus.OK.getReasonPhrase())\r\n                .response(response)\r\n                .build()\r\n        );\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/group1/MockProject/controller/StudentController.java b/src/main/java/com/group1/MockProject/controller/StudentController.java
--- a/src/main/java/com/group1/MockProject/controller/StudentController.java	(revision 4ee3392f8edef9d17d134f3997855cea395df3c3)
+++ b/src/main/java/com/group1/MockProject/controller/StudentController.java	(date 1735612514252)
@@ -9,18 +9,29 @@
 import com.group1.MockProject.service.PaymentService;
 import com.group1.MockProject.service.SavedCourseService;
 import com.group1.MockProject.dto.ApiResponseDto;
-import com.group1.MockProject.dto.response.InstructorResponse;
+import com.group1.MockProject.dto.request.AddPaymentRequest;
+import com.group1.MockProject.dto.request.PaymentRequest;
+import com.group1.MockProject.dto.response.*;
+import com.group1.MockProject.entity.Course;
+import com.group1.MockProject.repository.CategoryRepository;
+import com.group1.MockProject.repository.CourseRepository;
+import com.group1.MockProject.service.PaymentService;
+import com.group1.MockProject.service.SavedCourseService;
 import com.group1.MockProject.service.StudentService;
 import com.group1.MockProject.service.implementation.VNPayServiceImpl;
 import com.group1.MockProject.utils.JwtUtil;
 
 import java.time.LocalDateTime;
 import java.util.List;
+import java.util.stream.Collectors;
+
+import jakarta.validation.Valid;
 import java.util.Optional;
 
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.validation.Valid;
 import lombok.RequiredArgsConstructor;
+import org.modelmapper.ModelMapper;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.*;
@@ -30,13 +41,15 @@
 @RequestMapping("/api/v1/student")
 @RequiredArgsConstructor
 public class StudentController {
-  private final StudentService studentService;
-  private final SavedCourseService savedCourseService;
-  private final PaymentService paymentService;
+    private final StudentService studentService;
+    private final JwtUtil jwtUtil;
+    private final CourseRepository courseRepository;
+    private final CategoryRepository categoryRepository;
+    private final ModelMapper modelMapper;
+    private final SavedCourseService savedCourseService;
+    private final PaymentService paymentService;
   private final VNPayServiceImpl VNPayService;
 
-  private final JwtUtil jwtUtil;
-
   @GetMapping("/view-list-subscription")
   public ResponseEntity<List<InstructorResponse>> viewListSubscription(
       @RequestHeader("Authorization") String authorizationHeader) {
Index: src/main/java/com/group1/MockProject/repository/InstructorRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group1.MockProject.repository;\r\n\r\nimport com.group1.MockProject.entity.Instructor;\r\nimport com.group1.MockProject.entity.User;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\n\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n@Repository\r\n\r\n\r\npublic interface InstructorRepository extends JpaRepository<Instructor, Integer> {\r\n    Optional<Instructor> findById(Integer id);\r\n    Optional<Instructor> findInstructorByUser(User user);\r\n    List<Instructor> findByNameContainingIgnoreCase(String name);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/group1/MockProject/repository/InstructorRepository.java b/src/main/java/com/group1/MockProject/repository/InstructorRepository.java
--- a/src/main/java/com/group1/MockProject/repository/InstructorRepository.java	(revision 4ee3392f8edef9d17d134f3997855cea395df3c3)
+++ b/src/main/java/com/group1/MockProject/repository/InstructorRepository.java	(date 1735612479302)
@@ -15,4 +15,10 @@
     Optional<Instructor> findById(Integer id);
     Optional<Instructor> findInstructorByUser(User user);
     List<Instructor> findByNameContainingIgnoreCase(String name);
+
+    Optional<Instructor> findInstructorByUser(User user);
+
+//    @Query("SELECT i FROM Instructor i JOIN i.user u ORDER BY u.status")
+//    Page<Instructor> findAllWithSortByUserStatus(Pageable pageable);
+
 }
